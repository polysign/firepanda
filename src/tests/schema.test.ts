import { setupFirebase } from './helpers/firebaseHelper';

import { UsersCollection } from './collections/Users';
import { WhereClause } from '../Query';

let firebaseApp: firebase.app.App;
let Users: UsersCollection;

beforeAll(async () => {
  firebaseApp = await setupFirebase();
  Users = new UsersCollection(firebaseApp);
});

afterEach(async () => {
  const users = await Users.getAll();
  await Promise.all(users.map(async (user) => {
    return await Users.delete(user._id);
  }));
});

describe('Schema > _id > transform', () => {
  describe('Transform the document id to data which does not exist on the document', () => {
    test('it should fallback to an autogenerated id', async () => {
      // Given
      const data = {
        displayName: 'Georges',
        email: 'whatever@email.com'
      };

      // When
      const newDocumentId = await Users.add(data);

      // Then
      expect(newDocumentId).toBeDefined();
    });
  });
  describe('Transform the document id to data which exists on the document', () => {
    test('it should use the id from the data', async () => {
      // Given
      const uid = 'user-id-1234';
      const data = {
        uid: uid,
        displayName: 'Georges',
        email: 'whatever@email.com'
      };

      // When
      const newDocumentId = await Users.add(data);

      // Then
      expect(newDocumentId).toBeDefined();
      expect(newDocumentId).toBe(uid);
    });
  });
});
